You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have "lakes" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

Example:

[[0,1,0,0],
 [1,1,1,0],
 [0,1,0,0],
 [1,1,0,0]]

Answer: 16


#----------------------
def islandPerimeter(self, grid):
    return sum(sum(map(operator.ne, [0] + row, row + [0]))
               for row in grid + map(list, zip(*grid)))
               
#----------------------
class Solution:
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid:
            return 0

        perimeter = 0
        row_up = itertools.repeat(0)
        for row in grid:
            val_left = 0

            for val_up, val in zip(row_up, row):
                perimeter += int(val != val_up)
                perimeter += int(val != val_left)
                val_left = val
            else:
                perimeter += int(val_left)

            row_up = row
        else:
            perimeter += sum(row_up)

        return perimeter
        
#------------------------------
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        row_len = len(grid)
        col_len = len(grid[0])
        
        periLength = 0
        
        for r in range(0, row_len):
            for c in range(0, col_len):
                if grid[r][c] == 1:                
                    # check left-right cells, if left/right is the boundary or a lake, add 1
                    if c - 1 < 0 or grid[r][c-1] == 0:
                        periLength += 1
                    if c + 1 >= col_len or grid[r][c+1] == 0:
                        periLength += 1
                    
                    # check top - bottom cells, if top/bottom is the boundary or a lake, add 1
                    if r - 1 < 0 or grid[r-1][c] == 0:
                        periLength += 1
                    if r + 1 >= row_len or grid[r+1][c] == 0:
                        periLength += 1
        
        return periLength
